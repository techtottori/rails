これから学ぶこと
HTTPプロトコルとRailsの動作の仕組みについて、基本的な点を押さえていきます。
URLとアクションを結びつけるルーティングについて学ぶ。
コントローラが複数のアクションで構成されていること、アクションはそれぞれテンプレートと結びついていることを学びます。
コントローラとアクションの細かい機能をいくつか紹介します。
テンプレートファイルの書き方を学びます。
レイアウトテンプレートと部分テンプレートの使い方を学びます。

HTTPの基礎知識
HTTP(HyperText Transfer Protocol)は、ブラウザとサーバーがHTMLや画像などの情報をやり取りする時に使われるプロトコルです。

リクエストとレスポンス
HTTPは単純なプロトコルです。ブラウザがサーバーにリクエストを送り、サーバーはそれに応じてレスポンスを返します。次の例は、ブラウザが「http://localhost3000/members/123」というURLをリクエストする時に送信する内容です。
１行目は、「GET　リソース　HTTPのバージョン」です。ここでいうリソースとは、URLのパスとクエリの部分です。２行目以降はHTTPヘッダーと呼ばれ、ブラウザとサーバーに関する情報が書かれています。

サーバーはそれに応えて次のような内容のレスポンスを送り返します。１行目は「HTTPのバージョン　ステータスコード　メッセージ」です。２行目以降はHTTPヘッダーでヘッダーの直後に１行空けて、実際のHTMLや画像の内容が送信されます。

HTTPとセッション
HTTPは基本的に１つのリクエスト１つのレスポンスだけで完結します。何度もリクエストを送っても前回と同じ人のリクエストだとは認識されません。同じユーザーに対して、リクエストのたびにそのユーザー用のレスポンスを返すと言った仕組み（セッション）を作るには、サーバ側で工夫が必要になります。

URL
ブラウザは、アドレス欄のURLを解釈してサーバにリクエストを送ります。URLはいくつかのパーツに分かれています。ブラウザはサーバ名とポート番号を元にサーバに接続し、パスとクエリの部分を「GET /members/show?id = 123」のようにリクエストします。

スキーム/サーバー名/ポート番号/パス/クエリ/フラグメント

RailsはURLのパスとクエリを解釈してコントローラのアクションを呼び出し、レンダリングの結果を示します。

パラメータをパスに含める。
サーバ上のプログラムにパラメータを渡すには、「?名前 =値」のようにURLのクエリ部分に情報を入れるだけでなく、次のようにpラメータをパス部分に入れてしまうこともできます。

http://localhost:3000/members/123

簡潔で分かりやすいURLになる。

GETとPOST
ブラウザからのリクエストの１行目のGETのことをHTTPではメソッドという。一番使われるのはGETであるが、WEBアプリケーションではPOSTもよく使われる。GETメソッドとPOSTメソッドの間には、形式上の違いだけでなく、役割上の違いもあります。一般に、GETメソッドはウェブサーバからデータを取得する時に用い、POSTメソッドはウェブサーバの状態を変更する時に用います。「掲示板にコメントを投稿する」「商品をカートに入れる」などです。

その他メソッド
HTTPには、GETとPOSTの他に次のメソッドもあります。ただし、HTMLのフォームが対応しているのはGETとPOSTだけです。Railsでは、PATCHとDELETEにも役割を与えています。

リダイレクション
ブラウザが要求したURLとは別のURLを示して、ブラウザに再要求させる仕組みです。これを利用すると、ブラウザに表示されるページを強制的に移動することができます。
リダイレクションを行うには、サーバーのレスポンスのステータスコード「200」ではなく、「301」「302」「303」または「307」とします。
Railsでは、アクションの中でredirect_toメソッドを呼び出すことで、自動的にリダイレクションの処理ができます。

ステータスコード
HTTPでは、ステータスコードと呼ばれるものを返します。
404 サーバーに存在しない　
403 アクセスできない
500 サーバーエラー

Railsのリクエストの流れ
ブラウザからのリクエストを受けるとRailsはパスを調べ、routes.rbに従ってどのコントローラのどのアクションを選ぶかを決めます。
コントローラは複数あり、さらにコントローラの中にアクションが複数あります。

routes.rbは、configフォルダの下に置かれているファイルで、編集するとパスとアクションの対応関係を変更します。

Railsは選ばれたアクション（メソッド）を実行します。アクションには、モデルとの間で情報のやり取りをするプログラムを書きます。モデルはデータベースのテーブルと対応しています。アクションはモデルから取得した情報のうち、表示に必要なものをインスタンス変数に保存します。

アクションは、ブラウザーへのレスポンスを作成するためにビュー（テンプレート）を選びます。特に指定しない限り、アクションと同名のテンプレートが選ばれます。

選ばれたテンプレートは、コントローラのインスタンス変数を参照して、その値をHTMLソースの中に埋め込みます。この処理をレンダリングと呼びます。出来上がったHTML文書は、コントローラによってブラウザに送り返され、画面に表示されます。

ルーティング
Railsでは、リクエストされたURLのパスから特定のコントローラとアクションを選ぶことをルーティングと呼びます。ルート（route）は経路

アクションの追加
ルーティングの設定は、configフォルダ下のroutes.rbでする。

ルーティングエラー
ルーティングの設定にはないパスをブラウザで開こうとすると、ルーティングエラーが発生します。

このエラーは、次の場合にも発生します。
・ルーティングの設定をし忘れたり、書き間違えたりした。
・HTTPメソッドが合わない。POSTしか受け付けないアクションにGETでアクセスしようとした時
・app/assetやpublicの下に存在しないファイルにアクセスしようとした。

ルーティングの詳細
rootメソッドに「"コントローラ名#アクション名"」を指定すると、パスが「/」の場合のルーティングを指定できます。TopControllerではなくMainControllerなら次のように指定できます。

root "main#index"

特定のパスに対応するアクションをGETメソッドで呼び出すには、「get "パス" "コントローラ名#アクション名"」と記述します。例えば、「/about」というTopControllerのaboutアクションをGETメソッドで呼び出したいときは、次のようにします。

get "about" => "top#about"

同様に、「/login」というパスでSessionsControllerのloginアクションをPOSTメソッドで呼び出すなら、次のように記述します。

post "login" => "sessions#login"

「"info/company"  =>  "info#company"」のように「"コントローラ名/アクション名"  =>  "コントローラ名#アクション名"」というパターンの場合は、次のように簡略化してかけます。

get "info/company"

ルーティングにはasオプションで名前をつけることができます。次の例では、helpという名前のルーティングを作っています。コントローラやビューでhelp_pathというメソッドを呼び出しうと"/help"という文字列が返ります。

get "help" => "documents#help", as: "help"

パラメータをパスの中に埋め込みたいときは、:yearのように「コロン+パラメータ名」を使います。次の例では、「articles/2015/04」というパスによってArticelsControllerのshowアクションが呼び出され、params[:year]で「2015」、params[:month]で「04」が取り出せます。

get "articles/:year/:month" => "articles#show"

パスを返すメソッドとシンボル
ルーティングのasオプションを指定すると、about_pathのようなパスを返すメソッドが利用できるようになります。また、「root "top#index"」の指定によって、root_pathメソッドは"/"を返すようになります。このとき、link_toメソッドやredirect_toメソッドには、:aboutや:rootのようにシンボルでパスを指定できます。シンボルは、:aboutのように、パスを返すメソッド名から_pathをのぞいたものにします。

link_to "Home", :root
link_to"このサイトについて", :about

コントローラとアクション

コントローラの基本
コントローラの中には複数のアクションが含まれていることと、コントローラの名前のつけ方には決まりがある。

コントローラクラスの書き方
コントローラは、モデルからデータを受け取り、ビューにレンダリングを行わせます。

コントローラは、ApplicationControllerクラスのサブクラスとして実装します。

コントローラクラスのパブリックメソッドをアクションと呼びます。アクションはウェブサイトの１ページ及び１つの機能に相当します。

アクションで行うことは、テンプレート（ビュー）で表示するデータを用意してい、インスタンス変数に値をセットすることです。アクションは、原則として同名のテンプレートを使います。

アクションでないメソッド
コントローラクラスにアクションではないメソッドを記述する場合は、プライベートメソッドにする必要があります。そうしないと、意図しないコードが直接実行される可能性が生まれてしまいます。

命名規約
コントローラクラス名 Members　＋　Controller　先頭は大文字　キャメルケース
コントローラファイル名　members + _controller.rb　
テンプレートのフォルダ名　app/view/members
テストスクリプトのファイル名 members_controllers_test.rb

モデルの命名規約
データベーステーブル名　members
モデルクラス名 Member
モデルクラスのファイル名 member.rb
テストスクリプトのファイル名 member_test.rb

application_controller.rbの使い方
コントローラクラスの親クラスであるApplicationControllerは、app/controllersフォルダの下のapplication_controller.rbに記述されています。ApplicationControllerクラスにメソッドを加えれば、すべてのコントローラで共通して使える機能を作れます。8章では、ユーザーの認証や例外処理のためにapplication_controller.rbに共通のメソッドを記述しています。ApplicationControllerの親クラスは、Railsが用意しているActionController::Baseクラスです。

アクションで使える機能

LessonControllerの追加
bin/rails g controller lesson

パラメータの取得
アクションによって渡されるパラメータは２種類あります。１つは、ルーティングの設定によって「http://localhost:3000/lesson/step1/Sato」の「Sato」のようにパスの中に埋め込まれたパラーメータです。もう１つは、URLのクエリ部分に「?名前 =値」の形を使って「http://localhost:3000/lesson/step1?name=Sato」のように渡されるパラメータです。どちらのパラメータも、「params[:パラメータ名]」で取り出せます。
 LessonControllerにアクションstep1を追加します。「render text: "文字列"」は、テンプレートファイルを使わずに、直接文字列を送信する方法です。

 paramsの機能
 params[:パラメータ名]のparamsは、パラメータを含んだハッシュを返すメソッドです。単なるハッシュではなく、Hashを継承したActionController::Parametersというクラスのオブジェクトです。このクラスのハッシュは、文字列でもシンボルでも値を取り出せます。すなわち、
 params[:name]とparams["name"]は同じ値を返します。

 paramsが返すパラメータには、コントローラ名とアクション名も含まれています。params[:controller]でコントローラ名、params[:action]でアクション名を取り出せます。

 requestオブジェクト
 リクエストを送ってきたユーザの情報を取得するには、requestメソッドが返すオブジェクトを使います。例えば、ユーザのIPアドレスはrequest.remote_jpで取り出せます。環境変数を得るにはrequest.envを、リクエストヘッダーを得るにはrequest.headersを使います。例えば、ブラウザの種類を得るにはrequest.env["HTTP_USER_AGENT"]またはrequest.headers["User-Agent"]とします。



リダイレクション
redirect_toメソッドで簡単にできます。レンダリングは行われずにブラウザにステータスコード302と新しいURLが送られます。
アクションstep3とstep4を作って試してみましょう。redirect_toメソッドの引数は「action: リダイレクト先のアクション名」とします。

redirect_toメソッドの引数には、「redirect_to "/lesson/step4"」のようにパスやURLを文字列で渡すこともできます。

リダイレクションのステータスコード
HTTPのリダイレクション用のステータスコードには、301、302、303、307、があります。HTTP1.1の仕様では、フォームの送信後のリダイレクションには303を使うことになっていますが、伝統的には302が多いようです。
リダイレクションのステータスコードを使い分けたいときに、redirect_toメソッドにstatusオプションをつけます。

redirect_to action: "step4", status: 301

フラッシュ
Railsでリダイレクションを行うときは、同時にフラッシュという機能がよく使われます。フラッシュは、アクションとアクションの間で情報を受け渡す機能です。リダイレクションの前でfalshオブジェクトに情報を入れておくと、リダイレクション後のその文字列を取り出すことができます。

リダイレクション後にブラウザをリロードすると、flash[:notice]はnilとなります。フラッシュの名前が:noticeまたはalertの場合は、redirect_toメソッドの第2引数にハッシュを加えて、リダイレクションとフラッシュの設定を同時に行うこともできます。

また、:noticeと:alertの場合は、flash[:notice]やflash[:alert]をflash.notice、flash.alertと書くこともできます。フラッシュの仕組みは、セッション機能を利用しているので、クッキーを無効にしていると利用できません。

flash.now
リダイレクションではなく、1つのアクション内でフラッシュを使うことができます。flash.now[:名前 ]に文字列を入れると、テンプレートではflash[:名前]でメッセージを取り出せます。

アクション・コールバック
アクションが実行される前後には、決まりきった処理を行うことがよくあります。アクション・コールバックを使うとそうした処理を１つのメソッドにまとめて記述できます。

before_actionを利用する手順
1.アクション名と重ならないにコールバックの名前を決める
2.コールバック名と同じ名前のプライベートをコントローラに記述する
3.コントローラの中でbefore_acitonの引数にコールバックの名前をシンボルで指定する。

まず、コールバックの名前をset_messageと決めます。そして、プライベートメソッドset_messageを記述します。続いて、２行目でこのメソッド名set_messageをシンボルでbefore_actionに指定します。オプションとして「only: :step7」を加えると、step7アクションが呼ばれた場合にだけ、事前にアクション・コールバックが実行されます。複数のアクションに対して適用したい場合は、onlyオプションを配列に指定します。


逆に特定のオプションに対してアクション・コールバックが実行されないようにしたいときは、exceptオプションを指定します。

before_action :do_something, except: :step1
before_action :do_another, except: [:step1, :step2, :step3]

アクション・コールバックとフィルタ
Railsのバージョン３まではアクションコールバックはフィルタと呼ばれていた。
フィルタを指定するメソッドの名前はbefore_filterとafter_filterでした。

テンプレート
テンプレートの使い方を覚えれば、効率よくページ作成ができます。

テンプレートの基本
Railsのページデザインでは、コントローラのアクションでインスタンス変数を用意し、テンプレートにその変数を埋め込むのが基本的な流れとなります。

テンプレートの書式
Railsのテンプレート(erbファイル)では、HTML文書の中にRubyコードを埋め込んだものです。
<% %>か<%= %>で囲んだ部分は、Rubyのコードとして解釈されます。

コントローラのアクションで用意したデータをインスタンス変数に記録し、そのインスタンス変数をテンプレートに埋め込むのがビュー

to_sメソッドで出力される。
<%= 式 %>が出力されるときは、その中の式に対してto_sメソッドが呼ばれ、その結果の文字列が出力されます。<%= 式.to_s %>が表示されると考えてください。Rubyのオブジェクトは全てto_sメソッドを備えています。下記のstep8の例で@priceが存在しない時は、<p>円</p>という結果になります。

テンプレートファイルがなかったり、ファイル名を間違えたりしたときは、「Template is missing」というエラーが表示されます。

コントローラとテンプレートのオブジェクトは別
テンプレートをレンダリングする際に、「ActionView::Baseクラスを継承し、ヘルパーのモジュールをミックスインしたクラス」が自動的に作成されて、そのインスタンスのもとでコードが実行されます。そのため、テンプレート内ではAction Viewとヘルパーのメソッドが使えます。
後述のnumber_with_delimiterやlink_toといったメソッドは、Action Viewのメソッドです。
paramsやflashのようにどちらでも使えるメソッドがあるのはややこしいのですが、コントローラとテンプレートは、別のオブジェクトであることに注意してください。Rubyにはオブジェクト間でインスタンス変数を共有する機能があり、Railsはこの機能を利用してアクションのインスタンス変数をテンプレートに渡しています。

メソッドがなくてテンプレートがある場合
コントローラクラスの中にアクションのメソッドがなくても、app/viewsフォルダに「アクション.html.erb」というファイルがあれば、コントローラはそのファイルをレンダリングします。アクションの中ですることが何もなければ、そのメソッドは省略できます。ただし、筆者は空のメソッドでもコントローラの中に入れておく方がわかりやすいと思います。

renderメソッド
アクションの実行が終わると、Railsは自動的にアクションと同名のテンプレートを使ってHTMLを生成します。アクションの中でrenderメソッドを呼び出すと別のテンプレートを使ってレンダリングを行うこともできます。

別のアクション用のテンプレートを共有するには、引数にアクション名を指定します。

なお、コントローラにstep8というアクションがなくても、app/views/lessonフォルダにstep8.html.erbがあればレンダリングできます。app/views/lessonフォルダ以外にあるテンプレートを使いたいときは、「another/show」のようにapp/viewsフォルダを基点としたパス名を指定します。.html.erbは省略できます。

def show
  render "another/show"
end

二度レンダリング・リダイレクトはできない。
レンダリングは１つのアクションにつき一度だけと決められています。また、１つのアクションの中では、renderメソッドとredirect_toメソッドはどちらかを一度だけしか使えません。renderメソッドを二度呼び出したり、renderメソッドとredirect_toメソッドを両方呼び出したりすると、例外DoubleRenderErrorが発生します。

HTML特殊文字の変換
HTMLでは、<、>、&タグなどを表す特別な記号です。Railsのテンプレートでこれらの文字をそのまま埋め込むと、HTML文書の構造が変わってしまうかもしれません。これを防ぐために、HTMLの特殊文字を表示するときは、&lt;、&gt;、&amp;に変換する必要があります。<%= %>は自動的にこの変換を行います。

逆に、HTMLのタグをそのまま出力したい場合でも、特殊文字がいちいち変換されてしまいます。タグをタグとして出力するには、<%== %>を使います。

HTML特例文字の変換を抑えるには次のようにhtml_safeメソッドを用いることもできます。

<p><%= @comment.html_safe %>

このメソッドは文字列に「HTML文書に埋め込んでも安全である」という印をつけます。
Action Viewが用意しているlink_toメソッドやimage_tagメソッドのようにタグを生成するメソッドは「.html_safe付きの文字列を返す」

link_toの引数での特殊文字
link_toメソッドのようにタグを生成するメソッドの引数でも、特殊文字の変換が行われます。
Railsでは、細かいことを考えず<%= %>を書き、Action Viewのメソッドを使って入れば安全なHTMLを生成できるようになっています。引数にタグをわざと埋め込みたいときは、html_safeメソッドを使います。

link_to "<b>Top</b>", "/"

link_to "<b>Top</b>".html_safe,"/"


書式の指定とヘルパーメソッド
Railsのビュー機能を試す

数値、日付、文字列
小数点以下の桁数など文字列や数字の書式を揃えたいときは、Rubyのsprintfメソッドが使えます。

sprintfの書式の中で、「%文字」の部分に第2引数以降に指定した引数が埋め込まれます。
よく使われるのは、%d、%f、%sです。

日時や時刻の書式は、RubyのTimeクラスのメソッドstrfttimeで揃えられます。
Rubyのメソッドだけでなく、RailsのAction Viewが揃えているメソッドも利用できます。例えば、３桁ごとにカンマを入れて数値を表示させたいときは、number_with_delimiterメソッドを使います。

ヘルパーメソッドの作成
テンプレート内で使われるヘルパーメソッドを自分で書くこともできます。例として、改行をHTMLのbrタグに変換するtiny_formatメソッドを定義してみましょう。
app/helpersフォルダの下にlesson_helper.rbというファイルを新規作成して、次のような内容を書き入れてください。

hメソッドは、「<」→「&lt;」のようにHTML特殊文字を変換します。そして、gsubメソッドで改行を<br　/>に一括置換します。最後に、html_safeメソッドで<br />をそのまま出力します。
app/helpersフォルダの下で定義されたモジュールをヘルパーモジュールと言います。ヘルパーモジュールはすべてのテンプレートにミックスインされます。
tiny_formatメソッドを使ってみましょう。

ヘルパーモジュールとコントローラの関係
ヘルパーメソッドの数が増えて来たら、ヘルパーモジュールをいくつも作ってメソッドを分けるといいでしょう。ヘルパーモジュールには「...Helper」という形式の名前をつけ、ファイルには
「..._helper.rb」のような対応する名前をつけてください。例えば、LessonController用のテンプレートだけで使用するヘルパーメソッドをヘルパーモジュールLessonHelperで定義するのはいい考えです。ただし、ヘルパーモジュールはすべて、どのテンプレートもミックスインされます。
つまり、tiny_formatメソッドはテンプレートapp/views/top/index.html.erbの中で使用できます。
ヘルパーモジュールとコントローラの間には特別な関係はありません。このため、ヘルパーモジュール間でメソッド名が重複しないようにしてください。

RailsのAction Viewには、リンクや画像のためのタグを簡単に生成するヘルパーメソッドも用意されています。

リンク
テンプレート内でリンク用のタグ（HTMLのaタグ）を作るには、link_toメソッドを使います。
link_toメソッドの第一引数にはリンクのテキスト、第2引数にはパスを指定します。
次の例は、トップページのリンクを作成するものです。root_pathは「/」を返すメソッドで、:rootと指定することもできます。

link_toメソッドの第2引数には、次のようにパスを指定します。こうしたパスの指定方法は、コントローラのredirect_toメソッドの引数にも使えます。

link_toメソッドの第3引数には、ハッシュでmethodオプションやdataオプションを追加できます。methodオプションはHTTPメソッドの種類を指定します。dataオプションはリンク先に進むかどうかを示す確認メッセージを表示する際に利用します。

<%= link_to "削除", member, method: :delete,
           data: { confirm: "本当に削除しますか?" } %>
また、「属性名: 値」を追加すれば、aタグの属性になります。次の例は、<a href="/" class= "menu">のようなタグになります。

<%= link_to "Home", root_path, class: "menu" %>

現在のページだったらリンクしない
linkメソッドの代わりに「link_to_unless_currentメソッド」も使えます。このメソッドを使うと、「指定のパスが現在のページのものだったらリンクの代わりにテキストだけ表示する」ということができます。

<p><%= link_to_unless_current "Home", root_path %></p>

表示するテキストにタグを加えたいときは、link_to_unless_currentメソッドにブロックを渡します。

画像
リンクと同様に、画像用のタグ（HTMLのimgタグ）を作成するメソッドも用意しています。
image_tagメソッドに画像のファイル名とオプションを指定すると、自動的にタグができます。
image_tagメソッドの第1引数には画像ファイル名、第2引数にはハッシュでオプションを指定します。オプションはHTMLのimgタグに指定する属性と同じものが指定できます。縦と横の幅は「size: "87×111"」のように指定できます。

画像ファイルの標準的な置き場所は、app/assets/imagesフォルダです。ただし、image_tag("/images/rails.png")のようにパスを/で始めれば、publicフォルダにある画像が使われます。

一般的なタグを出力するには
HTMLのタグは、通常はRubyのコードとは別にして<%= %>の外に置きます。Rubyのコードを使ってタグを記述する必要があるときは、tagメソッドやcontent_tagメソッドを使います。

<%= tag(:br) %>
<%= content_tag(:p, class: "p1") do %>
こんにちは
<% end %>

条件分岐と繰り返し
条件分岐や繰り返しの構文を利用すると、テンプレートを効率よく記述できます。

テンプレートでは、「<% if 条件式 %>〜<% else %>〜<% end %>」でテキストのHTMLタグを囲むと、条件式の結果によって表示を切り替えることができます。間には<% elsif 条件式 %>を挟むことができます。

余分な改行やスペースの除去
<% -%>や<%= -%>のように-付きで閉じると、-%>の後ろの改行は取り除かれます。また、<% -%>のように-をつけて始めると、行頭から<%-までの空白が取り除かれます。

繰り返し
整数のtimesメソッドや、配列やハッシュのeachメソッドなどのブロックを<% %>で記述すると、表示を繰り返すことができます。繰り返し表示したいテキストやタグは、ブロック内に記述します。
<% 3.times do %>
ラン
<% end %>

ブロックを使うと、リスト(ulタグ)やテーブル(tableタグ)に配列やハッシュのデータを表示する時に効率の良い記述ができます。次の例は、ハッシュのeachメソッドを使ってテーブルの行を繰り返し表示するものです。

モックアップの完成
レイアウトテンプレート
ウェブサイトでは、ページごとのデザインを統一する必要があります。一般的には、ページ全体を囲む「枠」の中に、ページごとのコンテンツを入れるという形をとります。

レイアウトテンプレートとは
全体の枠となるレイアウトテンプレートは、app/views/layoutsフォルダの下に置いたテンプレートファイルに記述します。Railsはレンダリングを行う際に、各アクション用のテンプレートをレンダリングし、それをレイアウトテンプレートの中に埋め込んで、HTML全体を出力します。

「bin/rails new」コマンドでアプリケーションを作成すると、app/views/layoutsフォルダの下にapplication.html.erbというデフォルトのレイアウトテンプレートができます。
<% yield %>の部分がアクション用のテンプレートが埋め込まれる場所

<%= yield %>の部分にindex.html.erbの内容が埋め込まれる他に、<head>　〜</head>の間に
stylesheet_link_tagとjavascript_include_tag,csrf_meta_tagsの各メソッドが作ったタグが埋め込まれます。

まず、４行目にHTML文書の文字コードを指定するmetaタグを挿入します。HTMLのtitleタグの中身は、ヘルパーメソッドのpage_titleで作ることにします。

Railsはアクション用のテンプレートや部分テンプレートをレンダリングした後で、レイアウト	テンプレートをレンダリングします。about.html.erb内で設定した変数@page_titleが、application.html.erb内のpage_titleメソッドで使えるのはそのためです。

レイアウトテンプレートの切り替え
コントローラやアクションごとにレイアウトテンプレートを切り替えて、１つのサイトで複数のデザインを使い分けることもできます。
レイアウトテンプレートを指定する方法は、３つあります。
1.app/views/layoutsフォルダにtop.html.erbのようにファイル名が「コントローラ名.html.erb」のテンプレートを置くこと
2.コントローラでlayoutメソッドを使うこと。引数は,layoutsフォルダに置いたテンプレートファイル名から拡張子を除いたものにします。（引数はシンボルではなく文字列にしてください。）
3.アクション内でrenderメソッドにlayoutオプションをつけてテンプレートファイル名を指定することです。layoutオプションを使えば、ある条件の場合にだけレイアウトを切り替えることができます。

なお、レイアウトテンプレートを使わずに、アクション用のテンプレートの中身をそのままHTML全体とするには、「render layout: false」とします。

レイアウトの継承
ApplicationControllerにlayoutメソッドを記述すると、すべてのコントローラにレイアウトが継承されます。例えば、次のようにApplicationControllerでレイアウトを指定したとします。

class ApplicationController < ActionController::Base
  layout "application"
end

そして、次のようにTopControllerとHelpControllerを定義したとします。
class TopController < ApplicationController

end

class HelpController < ApplicationController
  layout "simple"
end

この場合、TopControllerではapp/views/layouts/application.html.erbがHelpControllerでは
app/views/layouts/simple.html.erbがレイアウトとして使われます。

部分テンプレート
サイトの中ではページ全体の枠だけでなく、各ページに入れる「パーツ」も共通にする必要が出てきます。例えば、ページの上部におくメニューバーや、ページの左右に置くサイドバーなどです。

部分テンプレートの使い方
部分テンプレート用のファイルは_menu_bar.html.erbのようにファイル名の前に_をつけます。
ファイルを置くフォルダはアクション用テンプレートと同じです。
