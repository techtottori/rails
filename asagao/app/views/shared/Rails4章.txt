データベースとモデル
この章では、MVCアーキテクチャノウチデ、データベースとのやり取りを行うコンポーネント、つまりモデルを扱います。

ポイント
データベースの仕組みとモデルの関係について学びます。
アプリケーション用のデータベースを作成します。
モデルを作成する方法を学びます。
マイグレーションスクリプトを記述してテーブルを定義します。
シードデータを使って開発用のデータベースに初期データを入れます。
様々なメソッドを使ってテーブルからレコードを取り出します。

データベースとモデルの基本
何らかのデータを集め、データの操作や検索を行えるようにしたものをデータベースと呼びます。データベースには色々な種類がありますが、現在よく使われているのはリレーショナルデータベースです。本書では、データベースといればリレーショナルデータベースのことです。
データベースは、テーブルの集合でできています。テーブルとはエクセルの表のようなもの。
各行がレコード、列はカラムを示しています。データベース管理システム（DBMS）を通して利用します。

Railsのモデル
Railsでは、データベースとのやりとりを行うクラスをモデルと呼びます。

データベースとモデル
モデルは、データベースのテーブルに対応するRubyのクラスです。モデルクラスのインスタンスは、１つの行（レコード）を表すオブジェクトになり、テーブルの列（カラム）に相当する属性を持ちます。例えば、商品情報のモデルクラスがあるとすると、そのインスタンスは「商品名」、「価格」、などの属性を持ちます。

Railsのモデルを使うと、直感的で記述しやすいコードでデータベースを扱うことができます。
例えば、123番の商品を表すレコードを取り出すには、モデルクラスのメソッドに番号を渡します。レコードから値を取り出したり値を入れたりする時には、「変数名.カラム名」のように記述します。

product = Product.find(123)
name = product.name
product.price = 1980

Railsのモデルは、メソッド呼び出しを自動的にSQL文に変換してDBMSに送信します。これによって、RailsではSQLの文法を知らなくてもデータベースに対する基本的な操作ができます。
SQLは別途勉強することをお勧めします。

主キー
先のfindメソッドに渡している番号は、主キーの値です。主キーとは、レコードを識別するためのカラムです。１つのテーブルでは、複数のレコード間で主キーの値は重複できません。
Railsの規約では、テーブルに決まった形式の主キーを１個だけ設定することになっています。主キーとなるカラムの名前はidです。値は整数の連番になります。

テーブルから特定のレコードを取り出すときは、モデルクラスのfindメソッドにidの値、つまり主キーの番号を渡します。また、Chapter9で紹介するように、テーブルを関連づけるときは、主キーを使って１つのテーブルのレコードから別のテーブルのレコードを参照します。

データベースの設定
１からデータベースを作成するときは、次の作業をします。この節では、1.と2.の作業を行い、「4.2　テーブルの作成」で3.を「4.3　データの保存」で4.を行います。

接続の設定
DBMSへの接続の設定は、configフォルダにあるdatabase.ymlで行います。このファイルは、Railsアプリケーションを作成した時に自動的に作られます。内容はYAML形式で書かれています。

３つのモード
Railsには、アプリケーションのモード（環境とも呼ばれます）が３種類あり、それぞれデータベースを使います。database.ymlでは、development:、test:、production:の下にそれぞれ開発用、テスト用、本番用のデータベースの設定を記述します。

config/environmentsフォルダの下には、３つのモードごとの設定ファイルdevelopment.rb、test.rb、production.rbがあり、「本番ではキャッシュを使い、開発では使わない」というような設定が書かれています。
３つのモードは環境変数で区別されます。コマンド「export RAILS_ENV=production」を実行してからrailsコマンドやrakeコマンドを実行すると、アプリケーションは本番モードのもとで動きます。

モードを調べるには
Railsアプリケーションの中では「Rails.env == "production"」のようにしてモードを表す文字列を調べられます。また、Rails.envは「モード名?」メソッドを持っていて、Rails.env.development?は開発モードならtrue,そうでなければfalseを返します。

データベースの作成
database.ymlの設定に従って、開発用にデータベースを作成しましょう。

SQLite3は、１つのデータベースを１つのファイルとして扱います。db:createによってdbフォルダの下には２つのdevelopment.sqlite3とtest.sqlite3ができます。
本番用のデータベースを作成するときは、RAILS_ENV=productionをつけます。すると、dbフォルダの下にproduction.sqlite3ができます。RAILS_ENVはRailsの実行モードを表す環境変数です。

また、データベースを削除したい場合は、以下のコマンドを使います。本番用のデータベースを削除したいときは、やはりRAILS_ENV=productionをつけます。

データベースの中にテーブルを作成するには、次の機能を使います。
タイムゾーンの設定
モデルを作成したり、マイグレーションを行ったりする前に、Railsアプリケーションのタイムゾーンを設定しておきましょう。

 Railsは、データベースのテーブルに時刻情報を保存する際に、時刻をUTCに変えて保存します。日本標準時は協定世界時から9時間の時差がある。

 タイムゾーンの切り替え

 Time.zone = "Eastern Time (US &  Canada)"

 Rake
 Rakeとは、Rubyで書かれたビルドツールです。ビルドツールとは、指定した一連の手順に従ってファイルの依存関係を調べ、自動的にコマンドを実行するソフトウェアです。ビルドツールとして有名なのはMakeというソフトウェアで、C言語のソースから実行ファイルを作成するのに使われています。
 Railsでは、データベースの操作やテストの実行にRakeを使います。
 rakeコマンドに与えるdb:createやdb:dropをタスクと呼びます。どんなタスクができるか調べるには「bin/rails -T」を実行します。
 こうしたタスクはインストールした Gemパッケージの中に書かれていますが、自分のRailsアプリケーション用にタスクを書くこともできます。lib/tasksフォルダの下に拡張子が.rakeのファイルを作り、「task :タスク名　do ~ end」の中にタスクのコードを書きます。
 次の例は、membersテーブルから会員番号とユーザー名の一覧を出力するRakeタスクで、
 「bin/rake member_list」で実行できます。モデルを扱うときは、taskメソッドの引数を
 「タスク名: :environment」とします。「desc "List all members"」は、「rake -T」で表示される文字列です。