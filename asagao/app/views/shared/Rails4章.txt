データベースとモデル
この章では、MVCアーキテクチャノウチデ、データベースとのやり取りを行うコンポーネント、つまりモデルを扱います。

ポイント
データベースの仕組みとモデルの関係について学びます。
アプリケーション用のデータベースを作成します。
モデルを作成する方法を学びます。
マイグレーションスクリプトを記述してテーブルを定義します。
シードデータを使って開発用のデータベースに初期データを入れます。
様々なメソッドを使ってテーブルからレコードを取り出します。

データベースとモデルの基本
何らかのデータを集め、データの操作や検索を行えるようにしたものをデータベースと呼びます。データベースには色々な種類がありますが、現在よく使われているのはリレーショナルデータベースです。本書では、データベースといればリレーショナルデータベースのことです。
データベースは、テーブルの集合でできています。テーブルとはエクセルの表のようなもの。
各行がレコード、列はカラムを示しています。データベース管理システム（DBMS）を通して利用します。

Railsのモデル
Railsでは、データベースとのやりとりを行うクラスをモデルと呼びます。

データベースとモデル
モデルは、データベースのテーブルに対応するRubyのクラスです。モデルクラスのインスタンスは、１つの行（レコード）を表すオブジェクトになり、テーブルの列（カラム）に相当する属性を持ちます。例えば、商品情報のモデルクラスがあるとすると、そのインスタンスは「商品名」、「価格」、などの属性を持ちます。

Railsのモデルを使うと、直感的で記述しやすいコードでデータベースを扱うことができます。
例えば、123番の商品を表すレコードを取り出すには、モデルクラスのメソッドに番号を渡します。レコードから値を取り出したり値を入れたりする時には、「変数名.カラム名」のように記述します。

product = Product.find(123)
name = product.name
product.price = 1980

Railsのモデルは、メソッド呼び出しを自動的にSQL文に変換してDBMSに送信します。これによって、RailsではSQLの文法を知らなくてもデータベースに対する基本的な操作ができます。
SQLは別途勉強することをお勧めします。

主キー
先のfindメソッドに渡している番号は、主キーの値です。主キーとは、レコードを識別するためのカラムです。１つのテーブルでは、複数のレコード間で主キーの値は重複できません。
Railsの規約では、テーブルに決まった形式の主キーを１個だけ設定することになっています。主キーとなるカラムの名前はidです。値は整数の連番になります。

テーブルから特定のレコードを取り出すときは、モデルクラスのfindメソッドにidの値、つまり主キーの番号を渡します。また、Chapter9で紹介するように、テーブルを関連づけるときは、主キーを使って１つのテーブルのレコードから別のテーブルのレコードを参照します。

データベースの設定
１からデータベースを作成するときは、次の作業をします。この節では、1.と2.の作業を行い、「4.2　テーブルの作成」で3.を「4.3　データの保存」で4.を行います。

接続の設定
DBMSへの接続の設定は、configフォルダにあるdatabase.ymlで行います。このファイルは、Railsアプリケーションを作成した時に自動的に作られます。内容はYAML形式で書かれています。

３つのモード
Railsには、アプリケーションのモード（環境とも呼ばれます）が３種類あり、それぞれデータベースを使います。database.ymlでは、development:、test:、production:の下にそれぞれ開発用、テスト用、本番用のデータベースの設定を記述します。

config/environmentsフォルダの下には、３つのモードごとの設定ファイルdevelopment.rb、test.rb、production.rbがあり、「本番ではキャッシュを使い、開発では使わない」というような設定が書かれています。
３つのモードは環境変数で区別されます。コマンド「export RAILS_ENV=production」を実行してからrailsコマンドやrakeコマンドを実行すると、アプリケーションは本番モードのもとで動きます。

モードを調べるには
Railsアプリケーションの中では「Rails.env == "production"」のようにしてモードを表す文字列を調べられます。また、Rails.envは「モード名?」メソッドを持っていて、Rails.env.development?は開発モードならtrue,そうでなければfalseを返します。

データベースの作成
database.ymlの設定に従って、開発用にデータベースを作成しましょう。

SQLite3は、１つのデータベースを１つのファイルとして扱います。db:createによってdbフォルダの下には２つのdevelopment.sqlite3とtest.sqlite3ができます。
本番用のデータベースを作成するときは、RAILS_ENV=productionをつけます。すると、dbフォルダの下にproduction.sqlite3ができます。RAILS_ENVはRailsの実行モードを表す環境変数です。

また、データベースを削除したい場合は、以下のコマンドを使います。本番用のデータベースを削除したいときは、やはりRAILS_ENV=productionをつけます。

データベースの中にテーブルを作成するには、次の機能を使います。
タイムゾーンの設定
モデルを作成したり、マイグレーションを行ったりする前に、Railsアプリケーションのタイムゾーンを設定しておきましょう。

 Railsは、データベースのテーブルに時刻情報を保存する際に、時刻をUTCに変えて保存します。日本標準時は協定世界時から9時間の時差がある。

 タイムゾーンの切り替え

 Time.zone = "Eastern Time (US &  Canada)"

 Rake
 Rakeとは、Rubyで書かれたビルドツールです。ビルドツールとは、指定した一連の手順に従ってファイルの依存関係を調べ、自動的にコマンドを実行するソフトウェアです。ビルドツールとして有名なのはMakeというソフトウェアで、C言語のソースから実行ファイルを作成するのに使われています。
 Railsでは、データベースの操作やテストの実行にRakeを使います。
 rakeコマンドに与えるdb:createやdb:dropをタスクと呼びます。どんなタスクができるか調べるには「bin/rails -T」を実行します。
 こうしたタスクはインストールした Gemパッケージの中に書かれていますが、自分のRailsアプリケーション用にタスクを書くこともできます。lib/tasksフォルダの下に拡張子が.rakeのファイルを作り、「task :タスク名　do ~ end」の中にタスクのコードを書きます。
 次の例は、membersテーブルから会員番号とユーザー名の一覧を出力するRakeタスクで、
 「bin/rake member_list」で実行できます。モデルを扱うときは、taskメソッドの引数を
 「タスク名: :environment」とします。「desc "List all members"」は、「rake -T」で表示される文字列です。

 テーブルの作成
 ここでは、データベースの中にテーブルを作成し、テーブルにカラム（=モデルの属性）を加える。

 モデルの作成
 membersテーブルにて会員情報を管理する。
 モデルを作成するには、コントローラを作成した時のように、ターミナルから「bin/rails g」コマンドを実行します。「bin/rails　g model モデル名」でモデルを作成します。

 テーブル名は、複数形のmembersとなる。
 app/modelsフォルダの下には、「members.rb」のファイルができます。
 Memberモデルでは、member.rbです。モデルに関するコードはこのファイルに記述します。作成したばかりのモデルクラスは中身が空になっていますが、ActiveRecord::Baseクラスを継承しているのでこれだけでも機能します。作成したばかりのモデルクラスは中身が空になっていますが、ActiveRecord::Baseクラスを継承しているのでこれだけでも機能します。

 class Member < ActiveRecord::Base
 end

 モデル名の指定
 モデル名を作成する時は、「bin/rails g model Member」のようにMemberを大文字で始めても構いません。また、member_imageと指定してもMemberImageとしても、MemberImageモデルができます。
ただし、membersのように複数形にしてはいけません。Membersモデルができてしまいます。
モデル名は単数形にするのが決まりです。

マイグレーション
データベースの中にMemberモデルに対応するmembersテーブルを作りましょう。

マイグレーション
Railsでは、データベースの作成や変更にマイグレーションという機能を使う、
自動的にテーブルのカラムを定義できるだけでなく、開発途中でカラムを追加したり変更したりする作業も楽に行える。
「bin/rails g model member」でモデルを作成すると、db/migrateフォルダの下にファイルができます。このファイルをマイグレーションスクリプトと呼びます。
CreateMembersクラスにchangeメソッドがあります。changeメソッドの中のcreate_tableメソッドはテーブルの作成を行うもので、このメソッドに渡すブロックの中にカラムを記述します。

カラムは、「t.カラムの型:カラム名」という形で記述します。例えば、nameという文字列型のカラムを追加するには、次のようにします。

create_table :members do |t|
  t.string :name
  t.timestamps null: false
end


主キーとして使用するカラム名の指定
create_tableメソッドでテーブルを作る時、主キーであるidカラムは自動的に追加されるので、ブロックの中で記述する必要はありません。もし主キーのカラム名をid以外のものにしたい場合は、次のようにprimary_keyオプションで指定します。

create_table :members, primary_key: "member_id" do |t|

そして、モデルクラスの定義の中で主キーのカラム名を指定します。

class Member < ActiveRecord::Base
  self.primary_key = "member_id"
end

カラムの型とRubyのクラス
create_tableメソッドの「t.カラムの型」や後述するadd_columnメソッドには、表のようにマイグレーションの型を指定できます。integerやdecimal、string、textなど。
また、DBMSの種類によっても違いがあります。

membersテーブルの作成

membersテーブルのためのマイグレーションスクリプト
ユーザー名、本名、メールアドレスを文字列型、背番号と性別を整数型のカラムとして作ります。生年月日は日付型とします。論理値型の管理者フラグは、trueの場合は管理者、falseでは一般ユーザとします。

「t.integer :number」や「t.string :name」に付いている「null: false」というオプションに注目してください。これは、空の値が保存されないように、カラムにNOT NULL制約をつける指定です。これにより、空の値を保存しようとすると、DBMSがエラーを出します。

また、「t.integer :gender」に付いている「null: false, default: 0」のオプションは、「カラムにNOT NULL制約を付け、デフォルト値を0とする。」という指定です。これにより、gender属性に値を入れないで保存すると自動的に値が0になります。同様に、administrator属性のデフォルト値をfalseにしています。

created_atカラムとupdate_atカラム
上記のマイグレーションスクリプトでは、t.timestampsによってcreate_atとupdate_atという時刻型のカラムが２つできます。Railsは、レコードを作成した時にcreated_atカラムに自動的にその時刻を入れます。また、レコードを更新した時にはupdate_atカラムに時刻を入れます。
この２つのカラムを作っておけば、レコードの作成と更新時刻を調べられるようになります。

typeというカラム名に注意
原則としてカラム名にはtypeという名前はつけられません。typeカラムはRailsの「単一テーブル継承」という機能のために使われます。種類を表すカラムを作りたい時は、kindのように別の名前にするか、member_typeのような名前を使ってください。

マイグレーションの詳細
紹介ですので、asagaoでは実行しないでください。

カラムの追加
bin/rails g migration ModifyMembersを実行すれば、db/migrateフォルダの下にファイルが作成されます。

新しいマイグレーションスクリプトのModifyMembersクラスには、changeメソッドができます。例えば、membersテーブルに電話番号を表すphoneカラムを追加したい時は、changeメソッドの中にadd_columnメソッドを記述します。

class ModifyMembers < ActiveRecord::Migration
  def change
    add_column :members, :phone, :string
  end
end

add_columnメソッドの引数には、テーブル名、追加するカラム名、カラムの型を順に指定します。「bin/rake db: migrate」を実行すると、新しいバージョンが読み込まれ、phoneカラムが追加されます。

マイグレーションのバージョン
マイグレーションスクリプトのファイル名の「年月日時分秒」は、マイグレーションのバージョンを表している。

古いバージョンに戻したい時は、次のバージョンを指定します。
bin/rake db:migrate VERSION=20150108014703

マイグレーションのバージョンは、データベース内のschema_migrationsテーブルに管理されています。自動生成されます。
Rakeでdb:migrate:statusタスクを実行すると、現在のマイグレーションのバージョンを確認できます。up印がついているのが実行済みのマイグレーションです。

データベース定義を古いバージョンに戻すには、db:rollbackタスクも使えます。次のコマンドは、直前に行われたマイグレーションを１つだけ取り消します。

bin/rake db:rollback STEP=1
ステップ数で何個戻るか変えられます。

なお、changeメソッド内にcreate_tableメソッドがあれば、データベース定義のバージョンを下げる時にテーブルが削除されます。

カラムの変更と削除
add_column
rename_column
change_column
remove_column

次のマイグレーションスクリプト

def change
  rename_column :members, :name, :nickname
end
end

change_columnメソッドとremove_columnメソッドには、changeメソッドの中で使用するとマイグレーションのロールバックができないという制限があります。この２つのメソッドをchangeメソッドに入れてロールバックするとエラーになります。
changeメソッドではできないロールバックを行いたい時は、代わりにupメソッドとdownメソッドの２つを記述してください。upメソッドにマイグレーションを進める処理を書き、downメソッドに取り消す処理を書けば、ロールバックができます。

class ModifyMembers < ActiveRecord::Migration
  def up
    rename_column :members, :name, :nickname
    change_column :members, :gender, :integer, null: false, default: 1
  end

  def down
    change_column :members, :gender, :integer, null: false, default: 0
    rename_column :members, :nickname, :name
  end
end

インデックス
カラムには、インデックスを加えることができます。インデックスとは索引のための情報です。カラムにインデックスを加えると、特定のカラムを使った検索を高速化できます。ただし、テーブルとは別に索引情報を持つことになるので、メモリがその分消費されます。
Railsのマイグレーションスクリプトでインデックスを設定するには、add_indexメソッドを使います。省略可能なオプションとしてuniqueとnameを指定できます。インデックス名を省略すると、「テーブル名_カラム名_index」が名前となります。

add_index :members, :name, unique: true, name: 'name_index'

インデックスを削除するには、remove_indexメソッドを使います。columnオプションでカラム名を指定するか、nameオプションでインデックス名を指定します。

remove_index :members, column: 'name'
remove_index :members, name: 'name_index'

add_indexやremove_indexは、change up downの各メソッド内に記述できます。

インデックスは規模が大きくなると必要。

開発中と本番でのマイグレーション
開発中にテーブルのカラム定義を変更するには、

新しいマイグレーションスクリプトを追加し、マイグレーションを行う。
既存のマイグレーションスクリプトを書き換え、マイグレーションを最初からやり直す。

Rakeのdb:migrate:resetタスクを使う。

リリース後のマイグレーションは慎重に

アプリケーションはリリースした後には簡単に変更できません。

データの保存
データベースができ、データベースにテーブルが作成できました。しかし、テーブルの中に実際のレコードがないと、モデルの学習もアプリケーションの開発もできません。テーブルに開発用のデータを入れてみましょう。

レコードの作成と更新

Railsコンソール
モデルの機能を簡単にチェックするには、サーバーを起動せずにRailsコンソールを使うのが便利です。ターミナルで「bin/rails c 」を実行。

bin/rails c

Rubyのコードを入力すると、その結果が=>の右に表示されます。また、SQLが実行された時は、そのSQL文が表示されます。

レコードの作成
テーブルに新しいレコードを追加する手順は、「モデルクラスのインスタンスの作成→saveメソッドの呼び出し」となります。membersテーブルに新しい会員を追加するには、newでインスタンスを作り、属性を変えて、saveメソッドでレコードを保存します。saveメソッドの呼び出しを忘れると、データベースには何も反映されません。

Railsコンソールで試してみる。


モデルクラスのnewには、「カラム名: 値」を並べたハッシュを渡すこともできます。

モデルオブジェクトを作成した後で、「member.assign_attributes(ハッシュ)」で値を入れることもできます。

クラスメソッドcreateを使うと、モデルオブジェクトの作成と保存が同時に行われます。

saveとsave!の違い
saveメソッドはレコードの保存に成功すると、trueを返します。バリデーションの際に値の検証が行われます。検証に成功してレコードを保存すればtrueを返し、検証が失敗すれば保存を行わずにfalseを返します。レコードを保存するメソッドには、saveメソッドの他に!付きのsave!メソッドもあります。save!では、検証が失敗した時にfalseが返るのではなく例外が発生します。
保存する時にデータベースにエラーが発生した時は、saveでもsave!でも例外が発生します。

レコードの更新
すでにテーブルに入っているレコードの情報を変更する時も、saveメソッドを使います。
次の例では、モデルクラスのfirstメソッドで最初のレコードを取り出してから、numberカラムを変更して保存しています。

assign_attributesメソッドでも属性を変更できます。

update_attributesメソッドは、assign_attributesメソッドとsaveメソッドを合わせたものです。オブジェクトの属性を変更し、直ちにデータベースに保存します。

Railsコンソールはexitで終了できます。

シードデータの投入
レコードを保存する方法を覚えたら、次にシードデータを使って開発用のデータベースにデータを入れましょう。

シードデータの使い方
アプリケーションを本番用のサイトでリリースする際には、サイトを公開する前にあらかじめデータベースに初期化用のデータを入れておく必要が出てきます。シードデータと呼びます。

「rails new」コマンドでアプリケーションを作成すると、dbフォルダの下にseeds.rbというファイルができます。このファイルの中にシードデータを保存するスクリプトを書きます。

例えば、seeds.rbの中でMemberモデルを使って、会員情報を保存するスクリプトを書くとします。

Member.create(number: 1, name: "Taro", administrator: true)

Rakeのdb:seedタスクを実行すれば、このスクリプトが実行されて、開発用データベースに会員「Taro」のレコードが保存されます。db:create,db:migrateと同様にRAILS_ENV=productionを加えれば、本番用のデータベースに保存されます。

本書でのやり方
ウェブアプリケーションの開発中には、自動テストだけでなく、ブラウザ上に実際にデータを表示してみる必要があります。ある程度「最もらしい」データを入れておいた方が、楽しく作業ができるでしょう。
本書では、本番用のデータではなく、開発用のデータとしてシードデータを用いることにします。これは、Railsの標準的な方法とは言えませんが、筆者たちが実際のアプリケーションで行なっている方法です。

このコードは、db/seeds/developmentフォルダの下に「テーブル名.rb」があれば、それをrequireメソッドで実行するものです。本番モードではdb/seeds/productionフォルダの下のファイルを実行します。

Railsアプリケーションのパスの取得
上記のseeds.rbで使っているRails.rootは、アプリケーションのルートパスを表すオブジェクトを返します。これはPathnameクラスのオブジェクトです。このオブジェクトのjoinメソッドにフォルダ名をいくつも渡せば、パスを組み立てられます。

dbフォルダの下にseedsフォルダを作成し、さらにその中にdevelopmentフォルダを作成してください。developmentフォルダの中にファイルmember.rbを作成して、10人の会員を作成するコードを記述します。

Rakeno
db:seedタスクでデータは投入できる。初期段階では、シードデータを何度も書き換えることになります。db:resetタスクを使うと良いでしょう。db:resetタスクはテーブルの内容をクリアしてからデータを投入します。

マイグレーションスクリプトを書き換えた時は、db:migrate:resetタスクでデータベースを作りなす。

データベースの確認
データベースの作成、テーブルの作成、データの投入がうまくいっているかどうかを確認するために、SQLite3のコマンドを入力してみるのも良いでしょう。

sqlite3 db/development.sqlite3

.tables

.schema members

SELECT * from members;

.quit

レコードの取り出しと検索

Railsのモデルは、データベースからデータを取り出したり、検索したりするための強力な機能を備えています。

テーブルのレコード1つをモデルオブジェクトとして取り出すには、findメソッドかfind_byメソッドを使います。

findメソッド
モデルのクラスメソッドにidカラム（主キー）の値を設定すると、その値を持つレコード（モデルオブジェクト）を取り出せます。
このメソッドを試す前に、実際のレコードのidカラムを調べておきましょう。クラスメソッドのidsメソッドを使えば、テーブルに存在する全てのレコードの主キーを配列として取得できます。

Member.ids

この中から好きなidを選んで、findメソッドでレコードを取り出し、変数memberに入れて見ましょう。

レコードに存在しないidをfindメソッドに指定すると、例外ActiveRecord::RecordNotFoundが発生します。

find_byメソッド
モデルクラスのクラスメソッドfind_byは、あるカラムを使ってレコードを検索し、最初に一致したものを返します。次の例は、nameカラムが「Taro」であるレコードを1つ取り出します。引数には「name: "Taro"」のようにハッシュで「カラム名: 値」を設定します。

member = Member.find_by(name: "Taro")

検索対象のカラムはいくつも指定できます。次の例は、性別（gender）が0(男性)で管理者(administrator)ではないレコードを取り出します。

指定された条件に一致するレコードがない場合はnilが返ります。

findメソッドとfind_byメソッドの使い分け
findメソッドを使うときは、例外が発生することを前提にしたプログラムを作ります。
Chapter8では例外ActiveRecord::RecordNotFoundを補足して「見つかりませんでした」ページを表示する方法を紹介しています。

場合によって例外を発生させたくないこともあります。そうしたときはfind_byメソッドにidを指定してください。レコードが見つからない場合は、例外は発生せずにnilが返ります。

クエリーメソッドとリレーションオブジェクト
クエリーメソッドを使うと、検索条件を読みやすいコードで記述できます。

クエリーメソッドとリレーションオブジェクト
クエリーメソッドの中で一番使われるのは、SQL文のWHERE句に当たるwhereメソッドです。
whereメソッドを使うと、検索条件に一致する複数のレコードを取り出せます。
次の例では、引数にハッシュで「nameカラムの値がTaro」という検索条件を指定しています。Railsコンソールの結果には、一見モデルオブジェクトの配列のようなものが表示されます。
クエリーメソッドが実際に返すのは、配列ではなくActiveRecord::Relationクラスのオブジェクトです。本書では、これをリレーションオブジェクトと呼びます。このオブジェクトの役割は、データベースからデータを取り出すための検索条件を保持することと、検索を実行してその結果をモデルの配列として使えるようにすることです。
リレーションオブジェクトが保持している検索条件から作られるSQL文を調べるには、to_sqlメソッドを使います。ここでは見やすいように、whereメソッドの呼び出しの後に「; nil」をつけて結果の表示を消しています。

引数には、WHERE句に指定する検索条件を文字列で指定することもできます。

検索が実行されるタイミング
whereメソッドなどでリレーションオブジェクトを作成すると、そのままでは検索は実行されません。検索条件を保持しているだけです。リレーションオブジェクトはRubyの配列と同じ名前のメソッドを持っています。each、map、lengthなどです。そうしたメソッドを呼び出すと、その時に初めてSQLによる検索を実行し、モデルオブジェクトの配列を利用できるようになります。
コントローラの中で、インスタンス変数@membersにリレーションオブジェクトをセットしたとします。

@members = Member.where(gender: 0)

次のようにビューの中でeachメソッドを呼び出すと、そのときに検索が実行されます。もし「if 条件」が成立しないときは、検索は実行されません。

<% if 条件 %>
  <% @members.each do |member| %>
    <%= member.name %>
  <% end %>
<% end %>

このように、リレーションオブジェクトは見かけ上は配列と同じように振る舞いますが、「実際に検索を実行してデータを取り出すのは、データが必要になったとき」という特徴を持っています。これにより、スッキリしたコードで余計な検索の実行を省くことができます。なお、即座に検索を実行してモデルオブジェクトの配列を作りたいとき場合は、loadメソッドを使います。

@members = Member.where(gender: 1).load

インスタンス変数@membersはリレーションオブジェクトですが、内部にモデルオブジェクトの配列を持つ状態になります。

lengthメソッドとsizeメソッド
lengthメソッドやsizeメソッドを使うと、リレーションオブジェクトが何件の検索結果を返すのか調べられます。この2つのメソッドは動作が違います。lengthメソッドは、検索を実行してモデルオブジェクトの配列を作り、その配列を長さを返します。sizeメソッドは、後に記述するcountメソッドを呼び出して、SQLの機能で件数を直接取得します。普通はsizeメソッドを使いますが、検索条件が確定していて、後で必ずモデルオブジェクトの配列を作ることになるなら、lengthメソッドの方がデータベースへのお問い合わせが減ります。

クエリーメソッドの重ね合わせ
リレーションオブジェクトに対してさらにクエリーメソッドを呼び出すと検索条件を追加できます。次の例は、「nameカラムの値がTaro」かつ「numberカラムの値が20未満」という検索条件ができます。

members = Member.where(name: "Taro")
members = members.where("number < 20")

この例は、次のように1行にまとめられています。

members = Member.where(name: "Taro").where("number < 20")

検索結果のソート順を指定するにはクエリメソッドorderを用います。次の例は、性別(genderカラム)の値が1(女性)の会員を背番号(numberカラム)の昇順で取り出します。descを設定すると、降順になります。

allメソッド
モデルクラスとリレーションオブジェクトにはallというメソッドが用意されています。Rails3.2までは、テーブルの全レコードをモデルオブジェクトの配列に返すメソッドでした。
Rails4からは、検索条件のないリレーションオブジェクトを返すようになりました。古いRailsのようなallメソッドの使い方をしたい時は、Member.all.to_aのようにto_aメソッドを使ってください。
ファインダーメソッドとの組み合わせ
リレーションオブジェクトにはファインダーメソッドと呼ばれるメソッドが備わっています。例えば、firstメソッドは、検索条件に一致するレコードを先頭から１個だけ取り出し、モデルオブジェクトを１個返します。

末尾からレコードを１個だけ取り出すlastメソッドもあります。なお、firstメソッドやlastメソッドを使う時は、orderメソッドでソート順を指定してください。ソート順がないと結果が不定になり、見つけにくいバグを埋め込むことになりかねません。

ファインダーメソッドにはほかに、findとfind_byがあります。この2つのメソッド機能は、紹介済みのモデルのクラスメソッドfind、find_byと同じです。次の例は、女性会員の中から主キーが１のレコードを取り出す。

Member.where(gender: 1).find(1)

ただし、ファインダーメソッドあクエリーメソッドの検索条件に縛られる点に注意してください。主キーが１である会員が存在していたとしても、その会員の性別が１でなければ例外ActiveRecordNotFoundが発生します。find_by(id: 1)とすれば例外発生せずにnilが返ります。

whereメソッドの便利な使い方
whereメソッドに「カラム名: 配列」というハッシュを渡すと、カラムの値が「複数の候補のどれかと同じ」という検索条件を指定できます。次の例は、背番号が15か17か19の会員を取り出します。

ハッシュの値を範囲オブジェクトにすると、あるカラムの値がその範囲にあるという検索条件を指定できます。次の例では、背番号が12以上14以下の会員を取り出します。

whereメソッドの直後にnotメソッドを指定すると、「出ない」という検索条件が使えます。whereメソッドは引数なしにして、notメソッドの引数に条件を指定してください。次の例は、「ユーザ名がTaroでない」会員を検索します。

プレースホルダー
whereメソッドには文字列を指定することができます。この文字列に疑問符を含めるとプレースホルダーになります。プレースホルダーとは、指定した値をSQL文の中に埋め込むための印です。次の例をご覧ください。見やすいように、whereメソッドの呼び出しのあとに「; nil」をつけて結果の表示を消しています。

whereメソッドには引数を2つ指定してください。第１引数はプレースホルダーを入れたSQL文をWHERE句fr、第２引数は文字列です。リレーションオブジェクトは、プレースホルダーの位置に'Taro'のように一重引用符付きで第２引数の文字列を埋め込みます。
第1引数にプレースホルダーがいくつもある場合には、その個数に応じて増やしてください。
プレースホルダーを使うと、単純なwhereメソッドでは作れない検索条件を指定できます。例えば、「または」という条件はこれまで紹介した機能では作れません。次のようにSQLのORとプレースホルダーを使えば、「ユーザー名がJiroであるか、または管理者である」会員を検索できます。

SQLインジェクションを防ぐ
whereメソッドで検索を行う時は、次のように変数を埋め込んではなりません。

@members = Member.where("name = '#{name}'")

変数の中にSQL文にとって意味のある文字が含まれていると、データベースが不正に利用されることがあるからです。このようなSQLを悪用したサーバーへの攻撃は「SQLインジェクション」
と呼ばれます。whereメソッドで変数を使う時は、ハッシュで指定するか、プレースホルダーで変数を展開すれば、SQL文にとって意味のある文字は適切に処理されます。例えば、変数nameが"Ta'ro"という値なら、Member.where("name = ?", name)が返すリレーションオブジェクトは次のSQL文を作ります。

集計用のメソッド
モデルクラスでは、次のような便利な集計用のメソッドが用意されています。
例えば、numberカラムのうち数字が一番大きいものを取り出すには、次のようにします。

集計用のメソッドは、リレーションオブジェクトでも使えます。次の例は、男性会員の数を数えます。

SQL文を直接指定するには
モデルクラスでは、findメソッドだけでなく、find_by_sqlメソッドを使ってSQL文を直接してすることもできます。

members = Member.find_by_sql(
  "SELECT * FROM members WHERE number = 11")

whereメソッドと同じくプレースホルダーも使えます。ただし、whereとは異なり、引数全体を配列で指定する必要がありまうs。

Railsコンソールの出力を変えるには
Railsコンソール上で、式の値が長々と表示されて煩わしい時は、次の指定で値の出力を止められます。


値の表示を元に戻すには、「conf.echo = true」と入力します。
さらに、SQLの出力もやめたい場合は、次のように入力します。SQLの出力を再開したい時はコンソールを開き直してください。



