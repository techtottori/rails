テストの考え方
現在のプログラミング手法においては、テスト駆動開発が注目を集めています。Railsの特徴の1つは、テストの仕組みがあらかじめ用意され、気軽にテスト駆動開発が行えることです。テストとはなんなのか、どのような利点があるのかを紹介しましょう。

本書では、アプリケーション開発において、ソフトウェアが正しく機能するかどうかを別のソフトウェアを使って調べる作業のことをテストと呼びます。Railsにおいて「テスト」という用語は、そうした意味で使われる
Railsではテストは大変重視されており、テストに必要な機能があらかじめ組み込まれています。プログラマはRailsが用意したテストスクリプトを編集して実行することで、Railsアプリケーションの出来具合を確かめることができます。

テストスクリプトを書くことで、不正なデータを用意して、それが実際に不正なものとして扱われるかどうかを確認すると言った作業を自動化できます。

テスト駆動開発
テストを行うタイミングは、ソースコードを書いたあとだけではありません。バグを調べるためにテストを行うだけでなく、機能を実装する前にテストを行うこともできます。仕様を明確にするためにテストを作り、テストを通すためにコーディングを行う、というスタイルのことをテスト駆動開発と呼びます。

テストを書く

テストが失敗することを確認する

テストが成功するように実装する

リファクタリング

これに対し、従来のウェブアプリケーション開発では、最初にコードを書いてからブラウザーで表示させてみて、バグがあれば直す、という作業になります。

テストスクリプトはていねいに書く
テストスクリプトには、仕様書あるいは設計書としての役割があります。つまり、顧客やユーザーの要求事項をRubyコードの形式で厳密に定義したものが、テストなのです。別のプログラマがソースコードを読むときに、テストスクリプトは重要な資料になります。

テストスクリプトを、その場限りの使い捨てのプログラムと考えないでください。むしろ、アプリケーション本体のコード土曜に丁寧なプログラミングを心がけるべきなのです。

テストが間違っていれば、アプリケーションも潜在的なバグを抱え込むことになります。

手動テストで見られるところ
 URLにアクセスした時に、予期される画面が表示される
 ある正しい操作をした時に、アプリケーションの状態が正しく変更される
 ある正しくない操作をした時に、適切なエラーメッセージが表示される

 Railsによる自動テストでは、こうした目視によるテストを精密で明確なものにします。
 例えば、モデルのテストでは以下のようなことを確認します。

 モデルの検索系メソッドが正しいデータを取得できるか
 モデルの更新系メソッドが正しくデータベースの状態を変化させるか
 モデルの更新系メソッドが不正な入力に対して適切なエラーを発生させるか

 コントローラのテストでは以下のようなことを確認します。

適切なテンプレートが選択されているか
インスタンス変数に適切な値が格納されているか。
適切にレンダリングされているか。あるいは適切なURLにリダイレクトされているか。

統合テストでは、ログインして、名簿に新しいメンバーを追加して、ログアウトすると言った一連の動きをテストします。



どこまでテストすれば良いのか
テスト駆動開発を採用すると、初めのうちはテストスクリプトを書くのに時間を取られることになります。ですが、全て書いても時間がないです。

テストの基本

ここでは、テストスクリプトを動かす方法、およびテストの基本となるアサーションメソッドを紹介します。また、Factory Girlを使ってテスト用のデータを作成します。

テスト用データベース
開発用、テスト用、本番用のデータベースを別に用意することで、開発用や本番用のデータベースに影響を与えることなく、データベースを書いては消し、書いては消しと言ったテストのための処理が行えます。

schema.rbの代わりにSQLを使う
DBMSに特有の機能を使っている場合は、テスト用データベースをschema.rbで定義すると、テスト用のデータベースと開発用のデータベースのスキーマが一致しないことがあります。例えば、MySQLに特有の機能を利用している場合などです。

この問題を避けるには、configフォルダのapplication.rbに次の設定を加えてください。

config.active_record.schema_format = :sql

マイグレーション実行時にstructure.sqlというSQL文のファイルが作られ、schema.rbの代わりに使われるようになります。

テストスクリプトの実行
テストスクリプトを動かす前に、アプリケーションのtestフォルダの下にあるfixturesフォルダを丸ごと削除してください。本書では、テスト用のデータを作る際にフィクスチャファイルは使用しません。

簡単なテストスクリプトを作成。

テストスクリプトを動かすには、ターミナルでRakeタスクのtestを使います。次のようにbin/rake testの後にテストスクリプトのパスを指定すれば、このmember_test.rbを実行できます。

フィクスチャファイルは作らない

ここでは、次のようなエラーが出る場合があります。

原因は、test/fixturesフォルダにmembers.ymlという名前のフィクスチャファイルが作られているためです。

次に,
MembersController用のテストスクリプトmembers_controller_test.rbを実行して見ましょう。

テストをまとめて実行
フォルダ単位でテストをまとめて行うこともできます。例えば、test/modelsフォルダにあるテストスクリプトを全て実行したい場合は、

bin:rake test:models

controllerも同様にテストできます。

また、全てのテストをまとめて実行したければ、次のように対象を省略します。

bin/rake test


アサーションメソッド
テストスクリプトtest/models/member_test.rb

require 'test_helper(

class MemberTest < ActiveSupport::TestCase
    test "the truth" do
        assert true
    end
end

ActiveSupport::TestCaseのサブクラスであるMemberTestクラスの中に、testメソッドがあります。
testメソッドのブロックにコードを記述すると、それがテスト用のコードになります。testメソッドの引数には、何をテストしているのかを表したテキストを渡します。日本語の文字列を指定しても構いません。
testメソッドのブロックではアサーションメソッドでテストを行います。アサーションとは、ある条件が成立しているかどうかチェックすることです。アサーションメソッドは、チェックに失敗すると警告を表示して、そのtestメソッドの実行を中断します。

assert trueのassertメソッドは、基本的なアサーションメソッドで、引数が真になるかどうかチェックします。引数がtrueなので、このテストは常に成功します。試しに、わざと条件が間違いになるようにして見ましょう。



Failureと表示されたので、このテストは失敗したことがわかります。テスト自体のバグや、モデルやコントローラ、テンプレートのバグで例外が発生した時は、Errorと表示されます。
assertの他にアサーション用のメソッドは何種類も用意されていますが、どれも引数の最後に文字列でメッセージを指定できます。

assertの他によく使われるアサーションメソッドには次のようなものがあります。


メソッド名に含まれるassertをrefuteに変えると、反対の意味になります。つまり、「〇〇出ないなら」成功します。

refute　false
refute_equal 1, 2

この他に、スクリプトが特定の例外を発生させるかどうかを調べるassert_raisesメソッドもあります。assert_raisesメソッドの引数には礼儀クラスを指定し、例外を起こすメソッドをブロックに記述します。

assert_raises(ActiveRecord::RecordNotFound) { Member.find(100) }

Railsのテストは、Gemパッケージのminitestを利用した機能です。MinitestはRubyをインストールすると一緒にインストールされます。上記のアサーションメソッドは、RailsのものではなくMinitest::Assertionsモジュールに標準的に用意されているものです。ですから、Railsだけでなく一般的なRubyプログラムでもテストを行うことができます。
なお、assert_responseなどのコントローラ用のアサーションメソッドは、Railsの機能として追加されているものです。

Factory Girl

テスト用データの準備
モデルやコントローラのテストをするには、テスト用のデータを簡単に用意できるしくみが必要です。Railsのテストでは、デフォルトでYAML形式のフィクスチャファイルを使います。本書では、テスト用のデータを楽に記述できるように、フィクスチャファイルではなくFactory Girlというライブラリを使います。
Factory GirlはGemパッケージとしてインストールできます。Gemfileの一番下に、「group:test do ~ end」というブロックを作り、その中にfactory_girl_railsを指定してください。

group :test do
    gem 'factory_girl_rails', '~> 4.4.0'
end

Bundler install

testフォルダの下にfactoriesという名前のフォルダを作成してください。このフォルダ下にFactory Girl用のスクリプトを置きます。
Factory Girl用のスクリプトは、次の書式で書きます。「factory :モデル名 do ~ end」
のブロックにモデルの属性名と同名のメソッドを並べ、引数にテスト用の値を指定します。

FactoryGirl.define do
    factory :モデル名 do
    属性名　値


  end
end

Memberモデルのnumberやnameのように、重複を禁止している属性では、「属性名　値」の代わりにsequenceメソッドを使うと便利です。sequenceメソッドを使うと、Factory Girlでテストデータを作るたびに、Taro1,Taro2のような連番のデータを用意できます。

sequence( :属性名 ) { |n| nを使った式 }

それでは、Memeberモデルのテスト用データを作りましょう。

gender(性別)とadministrator(管理者)は指定していません。この2つはマイグレーションスクリプトでデフォルト値を設定しているので、自動的にそれぞれ0とfalseになります。

member1:
    number: 1
    name: Taro
    full_name: "Yamada Taro"
    email: "taro1@example.com"
    birthday: <%= 30.years.ago.strftime("%Y-%m-%d")%>

単純なテーブルを使うアプリケーションではフィクスチャファイルで十分です。

テスト用データの利用
Factory Girl用のファイルを作成したら、テストスクリプトの中でデータの入ったモデルオブジェクトを簡単に作成できるようになります。保存済みのモデルオブジェクトを使うには、以下のように記述します。

member = FactoryGirl.create(:member)

データが入っていれば保存はされていないモデルオブジェクトは、次のように取り出します。

member = FactoryGirl.build(:member)

モデルオブジェクトの属性に特定の値を設定したい時は、引数に「属性名: 値」のハッシュを加えます。

member = FactoryGirl.create(:member, number: 99, name: "Jiro")
attributes_forメソッドを使うと、FactoryGirlのスクリプトを基にしたハッシュを用意できます。

attires = FactoryGirl.attributes_for(:member)

test/modelsフォルダのmember_test.rbにtestメソッドを追加。先ほどの"the truth"のテスト削除してください

ターミナルに値を表示する
テストスクリプトやモデル、コントローラのコードの中でputsメソッドやpメソッドを使えば、テストの実行中にターミナルに変数の値を表示できます。いわゆるprintfデバッグというもので、スマートな方法ではありませんが、役に立つこともあります。

member = FactoryGirl.create(:member)
p member.full_name

モデルのテスト
ここでは、モデルをテストする方法を紹介しながら、記事テーブルを扱うArticleモデルを開発していきます。

Articleモデルの作成
Moring Gloryの記事モデルを作っていきますよ。
記事を収めるテーブル名はarticles,対応するモデル名はArticleとします。テスト駆動開発によって、データベースから記事を取り出したり、記事を保存したり、サイトに表示したりする機能を加えることにしましょう。
先にconfig/routes.rbで、記事をリソースとして扱うルーティングを追加して置きましょう。

掲載開始日時(released_at)は、その日時になるまで記事をサイトに表示しない、というものです。掲載終了日時(expired_at)は、その日時がすぎたら記事をサイトに表示しない、というものです。後ほどArticlesモデルのクラスには、二漬けを調べて必要な記事を取り出す機能を加え、テストで確認することにします。
また、掲載開始日時は必須ですが、掲載終了日時は空(NULL)でも許容しています。
会員のみ閲覧できるフラグ(member_only)
 マイグレーションを実行して、データベースにarticlesテーブルを追加しましょう。

ブラウザで確認する開発モードのシードデータも用意して置きましょう。

バリデーションのテスト
モデルのテストをおこないながらバリデーションの機能をArticleモデルに加えましょう。

値のテスト
テストスクリプトでbリデーションをテストするにはは、モデルオブジェクトのvalid?メソッドやinvalid?メソッドを使います。valid?メソッドは、エラーが起きた時はfalse、起きない時はtrueを返します。

assert article.invalid?

#エラーになることを確認
assert article.invalid?
# tilteでエラーが起きることを確認
assert article.errors.include?(:title)

では実際に、テスト駆動開発の手法でバリデーションのコードを書いてみましょう。Articleモデルでは、タイトル(title),本文(body)、本文,掲載開始日時(released_at)で空の値を禁止することにします。
test/modelsフォルダにテストスクリプトarticle_test.rbを作成


newで作成したモデルオブジェクトには何も入っていないので、<assert article.invalid?>や[assert article.errors.include?(:title)]は成功すべきです。
