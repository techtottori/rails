テストの考え方
現在のプログラミング手法においては、テスト駆動開発が注目を集めています。Railsの特徴の1つは、テストの仕組みがあらかじめ用意され、気軽にテスト駆動開発が行えることです。テストとはなんなのか、どのような利点があるのかを紹介しましょう。

本書では、アプリケーション開発において、ソフトウェアが正しく機能するかどうかを別のソフトウェアを使って調べる作業のことをテストと呼びます。Railsにおいて「テスト」という用語は、そうした意味で使われる
Railsではテストは大変重視されており、テストに必要な機能があらかじめ組み込まれています。プログラマはRailsが用意したテストスクリプトを編集して実行することで、Railsアプリケーションの出来具合を確かめることができます。

テストスクリプトを書くことで、不正なデータを用意して、それが実際に不正なものとして扱われるかどうかを確認すると言った作業を自動化できます。

テスト駆動開発
テストを行うタイミングは、ソースコードを書いたあとだけではありません。バグを調べるためにテストを行うだけでなく、機能を実装する前にテストを行うこともできます。仕様を明確にするためにテストを作り、テストを通すためにコーディングを行う、というスタイルのことをテスト駆動開発と呼びます。

テストを書く

テストが失敗することを確認する

テストが成功するように実装する

リファクタリング

これに対し、従来のウェブアプリケーション開発では、最初にコードを書いてからブラウザーで表示させてみて、バグがあれば直す、という作業になります。

テストスクリプトはていねいに書く
テストスクリプトには、仕様書あるいは設計書としての役割があります。つまり、顧客やユーザーの要求事項をRubyコードの形式で厳密に定義したものが、テストなのです。別のプログラマがソースコードを読むときに、テストスクリプトは重要な資料になります。

テストスクリプトを、その場限りの使い捨てのプログラムと考えないでください。むしろ、アプリケーション本体のコード土曜に丁寧なプログラミングを心がけるべきなのです。

テストが間違っていれば、アプリケーションも潜在的なバグを抱え込むことになります。

手動テストで見られるところ
 URLにアクセスした時に、予期される画面が表示される
 ある正しい操作をした時に、アプリケーションの状態が正しく変更される
 ある正しくない操作をした時に、適切なエラーメッセージが表示される

 Railsによる自動テストでは、こうした目視によるテストを精密で明確なものにします。
 例えば、モデルのテストでは以下のようなことを確認します。

 モデルの検索系メソッドが正しいデータを取得できるか
 モデルの更新系メソッドが正しくデータベースの状態を変化させるか
 モデルの更新系メソッドが不正な入力に対して適切なエラーを発生させるか

 コントローラのテストでは以下のようなことを確認します。

適切なテンプレートが選択されているか
インスタンス変数に適切な値が格納されているか。
適切にレンダリングされているか。あるいは適切なURLにリダイレクトされているか。

統合テストでは、ログインして、名簿に新しいメンバーを追加して、ログアウトすると言った一連の動きをテストします。



どこまでテストすれば良いのか
テスト駆動開発を採用すると、初めのうちはテストスクリプトを書くのに時間を取られることになります。ですが、全て書いても時間がないです。

テストの基本

ここでは、テストスクリプトを動かす方法、およびテストの基本となるアサーションメソッドを紹介します。また、Factory Girlを使ってテスト用のデータを作成します。

テスト用データベース
開発用、テスト用、本番用のデータベースを別に用意することで、開発用や本番用のデータベースに影響を与えることなく、データベースを書いては消し、書いては消しと言ったテストのための処理が行えます。

schema.rbの代わりにSQLを使う
DBMSに特有の機能を使っている場合は、テスト用データベースをschema.rbで定義すると、テスト用のデータベースと開発用のデータベースのスキーマが一致しないことがあります。例えば、MySQLに特有の機能を利用している場合などです。

この問題を避けるには、configフォルダのapplication.rbに次の設定を加えてください。

config.active_record.schema_format = :sql

マイグレーション実行時にstructure.sqlというSQL文のファイルが作られ、schema.rbの代わりに使われるようになります。

テストスクリプトの実行
テストスクリプトを動かす前に、アプリケーションのtestフォルダの下にあるfixturesフォルダを丸ごと削除してください。本書では、テスト用のデータを作る際にフィクスチャファイルは使用しません。

簡単なテストスクリプトを作成。

テストスクリプトを動かすには、ターミナルでRakeタスクのtestを使います。次のようにbin/rake testの後にテストスクリプトのパスを指定すれば、このmember_test.rbを実行できます。

フィクスチャファイルは作らない

ここでは、次のようなエラーが出る場合があります。

原因は、test/fixturesフォルダにmembers.ymlという名前のフィクスチャファイルが作られているためです。

次に,
MembersController用のテストスクリプトmembers_controller_test.rbを実行して見ましょう。

テストをまとめて実行
フォルダ単位でテストをまとめて行うこともできます。例えば、test/modelsフォルダにあるテストスクリプトを全て実行したい場合は、

bin:rake test:models

controllerも同様にテストできます。

また、全てのテストをまとめて実行したければ、次のように対象を省略します。

bin/rake test


アサーションメソッド
テストスクリプトtest/models/member_test.rb

require 'test_helper(

class MemberTest < ActiveSupport::TestCase
    test "the truth" do
        assert true
    end
end

ActiveSupport::TestCaseのサブクラスであるMemberTestクラスの中に、testメソッドがあります。
testメソッドのブロックにコードを記述すると、それがテスト用のコードになります。testメソッドの引数には、何をテストしているのかを表したテキストを渡します。日本語の文字列を指定しても構いません。
testメソッドのブロックではアサーションメソッドでテストを行います。アサーションとは、ある条件が成立しているかどうかチェックすることです。アサーションメソッドは、チェックに失敗すると警告を表示して、そのtestメソッドの実行を中断します。

assert trueのassertメソッドは、基本的なアサーションメソッドで、引数が真になるかどうかチェックします。引数がtrueなので、このテストは常に成功します。試しに、わざと条件が間違いになるようにして見ましょう。