フォームとモデル
ウェブアプリケーションでは、HTMLのフォームを通じてデータベースのデータを作成したり変更したりする処理がよく行われます。Railsでは、そうした処理のためにモデルとHTMLのフォームを簡単に連携させる機能が備わっています。

モデルとフォームの連携
データベースからデータを取り出し、フォームに表示して、ユーザの操作によって情報を更新する、といった一連の流れは、Railsでは次の図のようになります。
コントローラではモデルのオブジェクトをテンプレートに渡し、テンプレートではそのオブジェクトを使ってHTMLのフォームを作成します。フォームからデータを送信された時は、送信されたデータをモデルに渡せばデータベースに保存できます。
新しいレコードを作成するときも、レコードを取り出す手順がないだけで、基本的な手順は変わりません。作成の場合は、コントローラで新しいオブジェクトを作ってテンプレートに渡すことになります。

フォームから送信されたデータは、コントローラでparamsメソッドを使って取り出します。
Memberモデルのフォームからデータを送信すると、paramsが返すハッシュの中身は次のようになります。

ハッシュが入れ子になっている点に注目してください。:memberをキーにしてparams[:member]を取り出すと、それもハッシュになっています。このparams[:member]をモデルオブジェクトのassign_attributesメソッドを渡せば、ハッシュの内容がモデルの属性にセットされます。

@member.assign_attributes(params[:members]) #属性をセット
@member.save 　#レコードをセット

フォームの記述
テンプレートでフォームを記述するのにform_forメソッドを使います。
newアクションとeditアクション
まず、MembersControllerのnewアクションとeditアクションを記述しましょう。newアクションでは、Member.newで新しいモデルオブジェクトを作成します。newメソッドの引数には、誕生日の初期値を指定して1980月1日1日
editアクションでは、findメソッドにidパラメータを渡してモデルオブジェクトを取り出します。

新規作成フォーム
app/views/membersフォルダの下に、テンプレートnew.html.erbを作成しましょう。
form_forメソッドにはnewアクションで作ったモデルオブジェクトを渡します。form_forのブロックの中にフォームの内容を記述しますが、とりあえず空にします。ブロックパラメータのformには、ActionView::Helpers::FormBuilderクラスのオブジェクトが渡されます。

type属性がhiddenのinputタグが2つ作られます。

RailsのCSRF対策
クロス・サイト・リクエスト・フォージェリの略で、ウェブサイトへの攻撃手法の1つです。攻撃対象のウェブサイトに送信を行うフォームやリンクなどを別のサイトに用意し、ログイン中のユーザにうっかりクリックさせる仕掛けです。勝手にブログへの投稿を行わせたり、ユーザーを大会させたりすることができてしまいます。
RailsはCSRF対策として、上記のform_forの例のようにHTTPメソッドがGET以外のフォームやリンクでは、authenticity_tokenの文字列を埋め込みます。
この文字列はRailsがユーザのセッションごとにユーザー別に用意するもので、アクションの実行前にチェックされ、文字列が不正の場合は例外が発生します。

更新フォーム
app/views/membersフォルダの下に、テンプレートedit.html.erbを作成し、new.html.erbと同じコードを記述してみましょう。

action属性は"/members"、method属性は"post"です。表示されない入力欄にname属性が"_method"、value属性が"patch"のものがあります。フォームが送信されると、
「"_method" => "patch" 」というパラメータが送られるので、RailsはHTTPメソッドがPATCHであると判断し、updateアクションを呼び出します。
form_forメソッドは、引数のモデルオブジェクトを調べ、保存されていなければcreate用のフォームを作成し、保存済みならupdate用のフォームを作成します。

form_forのオプション
フォームの送信先のパスとHTTPメソッドを自分で指定したい時は、urlオプションとmethodオプションを指定します。

form_for @member, url: member_path(@member), method: :patch

パラメータ名を変えたい時は、asオプションを使います。次の例はではフォームの入力欄のname属性はname="user[nunmber]"のようになり、コントローラではparams[:user]でデータが取り出せるようになります。

form_for @member, as:"user"

formタグにclass属性やid属性を指定したい時は、htmlオプションにハッシュを指定します。

form_for @member, html: { class: "member", id: "main_form" }

フォームの部品の記述
form_forメソッドのブロックパラメータ(|form|)に渡されるフォームビルダーは、様々なフォームの部品を作るメソッドを備えています。例えば、１行テキスト入力欄(<input type="text"/>)を作成するには、text_fieldメソッドを使います。引数にモデルの属性名（テーブルのカラム名）
を指定すれば、その属性を編集する入力欄になります。

<%= form_for @member do |form|  %>
背番号: <%= form.text_field :number %>
<% end %>

すると、次のようなinputタグができます。

@memberにデータが入っている時は、value="10"のように属性の値がセットされます。
name属性はname="member[number]"のように「モデル名[属性名]」の形になります。
フォームが送信されると、この入力欄のデータは「"member" => { "number" => "10" } 」のような入れ子のハッシュになります。
フォームビルダーのメソッドの詳細を見る前に、newアクションとeditアクションのテンプレートを作成して感じをつかんでいきましょう。
たいていの場合、newアクションとeditアクションは同じ入力欄を使いますので、部分テンプレートで共有します。app/views/membersの下に_form.html.erbを作成し、次のように記述してください。HTMLのテーブルを使って属性名とフォームの部品を並べます。

form_forの前には統合が必要

古いバージョンのRailsでは等号なしで「<% form_for」と書く必要がありましたが、現在では逆に「<%= form_for」のように等号が必要です。古いRailsアプリケーションを移植する時は注意してください。統合がないとフォームが表示されない。

部分テンプレートにローカル変数を渡す
上記のrenderメソッドには「form: form」というオプションを渡しています。これは、部分テンプレートに変数formを渡す指定です。テンプレートの間では、インスタンス変数を共有できますが、ローカル変数は共有できません。部分テンプレートの中で親テンプレートのローカル変数を使いたい時は「X: Y」という形のオプションをrenderメソッドに加えます。親テンプレートのローカル変数をYに指定すると、部分テンプレートの中でXという名前のローカル変数が使えます。

会員ページから「会員の新規登録」をクリックし、newアクション用のフォームを表示してみましょう。

会員一覧ページから会員の名前の右にある[編集]をクリックし、editアクション用のフォームを表示してみましょう。editアクションではモデルオブジェクトにMemberモデルの属性が入っているので、入力欄は値が最初から入っている状態になります。

フォームビルダーのメソッド

どのメソッドでも、第1引数にはモデルの属性名を指定します。また、大抵のメソッドでは引数の最後にハッシュのオプションでタグの属性を並べることができます。

１行テキスト、パスワード、隠し項目
１行のテキスト入力欄は、textfieldメソッドで記述します。オプションにはsizeなどの属性を指定できます。password_fieldメソッドを使うとパスワード入力欄になり、hidden_fieldメソッドを使うと表示されない欄になります。

<%= form.text_field :name, size: 16 %><br />
パスワード: <%= form.password_field :password, size: 12 %>
<%= form.hidden_field :some_value %>

複数行テキスト
複数行のテキスト入力欄(textareaタグ)は、text_areaメソッドで記述します。幅(cols属性)と高さ(row属性)　は、オプションで指定します。

備考:<br />
<%= form.text_area :remarks, cols: 40, rows: 3 %>

チェックボックス
チェックボックスは、check_boxメソッドで記述します。第2引数にはHTMLの属性をハッシュで指定します。チェックボックスの値を設定したい時は、第3引数と第4引数にオンの場合とオフの場合の値を並べます。

value属性の値を設定しないと、自動的にオンの値は「1」、オフの値は「0」となります。フォームデータをモデルオブジェクトに入れると、「1」がtrue,「0」がfalseになります。

<%= form.check_box :administrator %> 管理者

最初からチェックがついた状態にしたい時は、「@me」